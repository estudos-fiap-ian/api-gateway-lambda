name: Deploy Serverless Infrastructure

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.2.0

jobs:
  terraform:
    name: 'Terraform Deploy'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    # Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Setup Node.js for Lambda functions
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # Install dependencies for Lambda functions
    - name: Install Lambda dependencies
      run: |
        cd auth
        npm install

    # Create Lambda deployment packages
    - name: Create Lambda packages
      run: |
        # Create register.zip
        cd auth
        zip -r ../register.zip register.js node_modules/

        # Create login.zip
        zip -r ../login.zip login.js node_modules/

        # Create anonymous.zip
        zip -r ../anonymous.zip anonymous.js node_modules/

        cd ..

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -var="jwt_secret_key=${{ secrets.JWT_SECRET_KEY }}"

    # On push to "main", build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false -var="jwt_secret_key=${{ secrets.JWT_SECRET_KEY }}"

    # Output API Gateway URL
    - name: Output API Gateway URL
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "API Gateway URL:"
        terraform output base_url