name: 'Serverless Infrastructure'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Lambda dependencies
      run: |
        cd auth
        npm install

    - name: Create Lambda packages
      run: |
        cd auth
        zip -r ../register.zip register.js node_modules/
        zip -r ../login.zip login.js node_modules/
        zip -r ../anonymous.zip anonymous.js node_modules/
        cd ..

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false -var="jwt_secret_key=${{ secrets.JWT_SECRET_KEY }}"
      continue-on-error: true

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: github.event_name == 'pull_request' && steps.plan.outcome == 'failure'
      run: |
        echo "Terraform Plan failed!"
        exit 1

    - name: Get NLB ARN from terraform-infra remote state
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: get_nlb_arn
      run: |
        # Use AWS CLI to get NLB ARN from the terraform-infra S3 backend
        # The NLB ARN is stored in the terraform state

        # Initialize a temporary terraform configuration to read remote state
        mkdir -p /tmp/terraform-infra-reader
        cd /tmp/terraform-infra-reader

        cat > main.tf << 'EOF'
        terraform {
          backend "s3" {
            bucket = "bucket-s3-ian-fiap"
            key    = "terraform.tfstate"
            region = "us-east-1"
          }
        }

        data "terraform_remote_state" "infra" {
          backend = "s3"
          config = {
            bucket = "bucket-s3-ian-fiap"
            key    = "terraform.tfstate"
            region = "us-east-1"
          }
        }

        output "nlb_arn" {
          value = data.terraform_remote_state.infra.outputs.nlb_arn
        }

        output "nlb_listener_arn" {
          value = data.terraform_remote_state.infra.outputs.nlb_listener_arn
        }
        EOF

        terraform init
        NLB_ARN=$(terraform output -raw nlb_arn)
        NLB_LISTENER_ARN=$(terraform output -raw nlb_listener_arn)
        echo "nlb_arn=$NLB_ARN" >> $GITHUB_OUTPUT
        echo "nlb_listener_arn=$NLB_LISTENER_ARN" >> $GITHUB_OUTPUT

        # Cleanup
        cd /
        rm -rf /tmp/terraform-infra-reader

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        terraform apply -auto-approve -input=false \
          -var="jwt_secret_key=${{ secrets.JWT_SECRET_KEY }}" \
          -var="nlb_arn=${{ steps.get_nlb_arn.outputs.nlb_arn }}" \
          -var="nlb_listener_arn=${{ steps.get_nlb_arn.outputs.nlb_listener_arn }}"

    - name: Output API Gateway URL
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "API Gateway URL:"
        terraform output base_url